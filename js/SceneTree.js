// Generated by CoffeeScript 1.12.4
var ReactComponent, ReactComponentTree, ReactInstanceMap, ReactTreeTraversal, Type, assertView, belongsToChain, belongsToCollection, emptyFunction, getReactInstance, getReactTag, type;

ReactComponentTree = require("ReactComponentTree");

ReactTreeTraversal = require("ReactTreeTraversal");

ReactInstanceMap = require("ReactInstanceMap");

ReactComponent = require("react/lib/ReactComponent");

emptyFunction = require("emptyFunction");

Type = require("Type");

type = Type("SceneTree");

type.defineValues(function() {
  return {
    _tree: Object.create(null)
  };
});

type.defineMethods({
  findScene: function(view, filter) {
    var inst, scene, tag;
    if (filter == null) {
      filter = emptyFunction.thatReturnsTrue;
    }
    assertView(view);
    inst = getReactInstance(view);
    while (inst) {
      tag = ReactComponentTree.getTagFromInstance(inst);
      scene = this._tree[tag];
      if (scene && filter(scene)) {
        return scene;
      }
      inst = ReactTreeTraversal.getParentInstance(inst);
    }
    return null;
  },
  findChain: function(view) {
    var scene;
    if (scene = this.findScene(view, belongsToChain)) {
      return scene.chain;
    } else {
      return null;
    }
  },
  findCollection: function(view) {
    var scene;
    if (scene = this.findScene(view, belongsToCollection)) {
      return scene.collection;
    } else {
      return null;
    }
  },
  _addScene: function(scene) {
    var tag;
    if (!scene.view) {
      throw Error("Scene must be mounted!");
    }
    tag = getReactTag(scene.view);
    if (!this._tree[tag]) {
      this._tree[tag] = scene;
      return;
    }
    throw Error("Scene with tag '" + tag + "' already exists!");
  },
  _removeScene: function(scene) {
    var tag;
    if (!scene.view) {
      throw Error("Scene must be mounted!");
    }
    tag = getReactTag(scene.view);
    return delete this._tree[tag];
  }
});

module.exports = type.construct();

assertView = function(view) {
  if (!(view instanceof ReactComponent)) {
    throw TypeError("'view' must be a kind of ReactComponent");
  }
};

belongsToChain = function(scene) {
  return scene.chain !== null;
};

belongsToCollection = function(scene) {
  return scene.collection !== null;
};

getReactInstance = function(view) {
  var inst, next;
  inst = ReactInstanceMap.get(view);
  while (next = inst._renderedComponent) {
    inst = next;
  }
  return inst;
};

getReactTag = function(view) {
  var inst;
  inst = getReactInstance(view);
  return ReactComponentTree.getTagFromInstance(inst);
};
