// Generated by CoffeeScript 1.12.4
var Scene, SceneTree, Type, assertType, isType, type;

assertType = require("assertType");

isType = require("isType");

Type = require("Type");

SceneTree = require("./SceneTree");

Scene = require("./Scene");

type = Type("SceneChain");

type.defineArgs({
  isHidden: Boolean
});

type.defineReactiveValues(function(options) {
  return {
    isHidden: options.isHidden === true
  };
});

type.defineGetters({
  length: function() {
    return this._length;
  },
  current: function() {
    return this._current;
  },
  scenes: function() {
    if (this._current) {
      return this._scenes.concat(this._current);
    } else {
      return [];
    }
  }
});

type.defineMethods({
  push: function(scene, options) {
    assertType(scene, Scene.Kind);
    assertType(options, Object.Maybe);
    if (scene.chain !== null) {
      throw Error("Scenes can only belong to one chain at a time!");
    }
    if (this._current !== null) {
      this._current.__onInactive();
      this._scenes.push(this._current);
    }
    this._length += 1;
    scene._chain = this;
    scene.__onActive(options);
    this._current = scene;
  },
  pop: function() {
    var current, scene;
    if (this._current === null) {
      return null;
    }
    scene = this._current;
    scene._chain = null;
    scene.__onInactive();
    this._length -= 1;
    if (current = this._scenes.pop()) {
      current.__onActive();
      this._current = current;
      return scene;
    }
    this._current = null;
    return scene;
  }
});

type.defineStatics({
  find: function(view) {
    return SceneTree.findChain(view);
  }
});

type.defineValues(function() {
  return {
    _scenes: [],
    _length: 0
  };
});

type.defineReactiveValues({
  _current: null
});

module.exports = type.build();
