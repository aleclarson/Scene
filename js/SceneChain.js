// Generated by CoffeeScript 1.12.4
var Scene, SceneTree, Type, assertType, type;

assertType = require("assertType");

Type = require("Type");

SceneTree = require("./SceneTree");

Scene = require("./Scene");

type = Type("SceneChain");

type.defineStatics({
  find: function(view) {
    return SceneTree.findChain(view);
  }
});

type.defineArgs({
  isHidden: Boolean
});

type.defineReactiveValues(function(options) {
  return {
    isHidden: options.isHidden === true
  };
});

type.defineGetters({
  path: function() {
    return this._path;
  },
  last: function() {
    return this._last;
  },
  scenes: function() {
    return this._scenes;
  }
});

type.defineMethods({
  push: function(scene, path) {
    assertType(scene, Scene.Kind);
    assertType(path, String.Maybe);
    if (scene.chain !== null) {
      throw Error("Scenes can only belong to one chain at a time!");
    }
    if (this._last !== null) {
      this._last.__onInactive();
    }
    scene._chain = this;
    scene.__onActive();
    if (path) {
      this._paths.push(path);
      this._path = path;
    }
    this._scenes.push(scene);
    this._last = scene;
  },
  pop: function() {
    var scene, sceneCount;
    sceneCount = this._scenes.length;
    if (sceneCount === 0) {
      return;
    }
    scene = this._scenes.pop();
    scene.__onInactive();
    scene._chain = null;
    if (sceneCount === 1) {
      this._last = null;
      return;
    }
    if (this._paths.length) {
      this._paths.pop();
      this._path = this._paths[sceneCount - 2];
    }
    this._last = this._scenes[sceneCount - 2];
    this._last.__onActive();
  }
});

type.defineValues(function() {
  return {
    _paths: [],
    _scenes: []
  };
});

type.defineReactiveValues({
  _path: null,
  _last: null
});

module.exports = type.build();
